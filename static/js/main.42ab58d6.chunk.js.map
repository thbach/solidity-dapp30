{"version":3,"sources":["utils.js","App.js","index.js"],"names":["states","App","useState","undefined","web3","setWeb3","accounts","setAccounts","contract","setContract","bet","setBet","players","setPlayers","houseFee","setHouseFee","betCount","setBetCount","betSize","setBetSize","admin","setAdmin","contractBalance","setContractBalance","contractAddress","setContractAddress","events","setEvents","eventQuery","a","event","id","address","pot","getPastEvents","fromBlock","toBlock","results","count","map","result","returnValues","winner","unshift","updateBet","Promise","all","methods","currentState","call","eth","getBalance","_address","state","balance","size","updatePlayers","getPlayers","e","preventDefault","target","elements","value","utils","toWei","createBet","send","from","cancel","withdrawEther","useEffect","resolve","reject","window","addEventListener","ethereum","Web3","enable","console","log","provider","providers","HttpProvider","getAccounts","net","getId","networkId","deployedNetwork","Lottery","networks","Contract","abi","init","on","className","fromWei","player","key","onSubmit","htmlFor","type","onClick","doBet","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42ab58d6.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://localhost:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n};\n\nexport { getWeb3 };\n","import React, { useEffect, useState } from 'react';\nimport Lottery from './contracts/Lottery.json';\nimport { getWeb3 } from './utils.js';\n\n\nconst states = ['IDLE', 'BETTING'];\n\nfunction App() {\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState(undefined);\n  const [contract, setContract] = useState(undefined);\n  const [bet, setBet] = useState(undefined);\n  const [players, setPlayers] = useState([]);\n  const [houseFee, setHouseFee] = useState(undefined);\n  const [betCount, setBetCount] = useState(undefined);\n  const [betSize, setBetSize] = useState(undefined);\n  const [admin, setAdmin] = useState(undefined);\n  const [contractBalance, setContractBalance] = useState(undefined);\n  const [contractAddress, setContractAddress] = useState(undefined);\n  const [events, setEvents] = useState(undefined);\n\n\n  async function eventQuery(){\n    if (contract != undefined) {\n      const events = []\n      const event = {id: 0, address: 123, pot: 123};\n      const results = await contract.getPastEvents({fromBlock: 0, toBlock: 'latest'});\n      let count = 0;\n      results.map(result => {\n        event = {id: count, address: result.returnValues.winner, pot: result.returnValues.pot};\n        events.unshift(event);\n        count ++;\n      })\n      setEvents(events);\n    }\n  }\n\n\n  useEffect(() => {\n    const init = async () => {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Lottery.networks[networkId];\n      const contract = new web3.eth.Contract(\n        Lottery.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      const [houseFee, state, admin, balance] = await Promise.all([\n        contract.methods.houseFee().call(),\n        contract.methods.currentState().call(),\n        contract.methods.admin().call(),\n        web3.eth.getBalance(contract._address)\n      ]);\n\n      setWeb3(web3);\n      setAccounts(accounts);\n      setContract(contract);\n\n      setHouseFee(houseFee);\n      setAdmin(admin);\n      setContractAddress(contract._address);\n      setContractBalance(balance);\n      setBet({state: 0});\n\n      eventQuery();\n    }\n    init();\n    window.ethereum.on('accountsChanged', accounts => {\n      setAccounts(accounts);\n    });\n  }, []);\n\n  const isReady = () => {\n    return (\n      typeof contract !== 'undefined'\n      && typeof web3 !== 'undefined'\n      && typeof accounts !== 'undefined'\n      && typeof houseFee !== 'undefined'\n    );\n  }\n\n  useEffect(() => {\n    if(isReady()) {\n      updateBet();\n      updatePlayers();\n      eventQuery();\n    }\n  }, [accounts, contract, web3, contractBalance, events]);\n\n  async function updateBet() {\n    const [state, balance, count, size] = await Promise.all([\n      contract.methods.currentState().call(),\n      web3.eth.getBalance(contract._address),\n      contract.methods.betCount().call(),\n      contract.methods.betSize().call()\n    ]);\n    setBetCount(count);\n    setBetSize(size);\n    setContractBalance(balance);\n    setBet({state: state});\n  }\n\n  async function updatePlayers() {\n    const players = await contract.methods.getPlayers().call();\n    setPlayers(players);\n  }\n\n  async function createBet(e) {\n    e.preventDefault();\n    let count = e.target.elements[0].value;\n    let size = e.target.elements[1].value;\n    size = web3.utils.toWei(size, 'ether');\n    await contract.methods.createBet(count, size).send({from: accounts[0]});\n\n    updateBet();\n  };\n\n  async function cancel() {\n    await contract.methods.cancel().send({from: accounts[0]});\n    updateBet();\n    updatePlayers();\n  };\n\n  async function withdrawEther() {\n    await contract.methods.withdrawEther(accounts[0]).send({from: accounts[0]});\n    updateBet();\n  };\n\n  async function doBet(e) {\n    e.preventDefault();\n    await contract.methods.bet().send({from: accounts[0], value: betSize});\n\n    updateBet();\n    updatePlayers();\n  };\n\n\n\n  if(!bet || typeof bet.state === 'undefined') {\n    return <div><h1>Loading... Allow Metamask to read your address, Switch to KOVAN testnet and hit refresh</h1></div>;\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"text-center\">Lottery - Kovan testnet</h1>\n\n      <p>House Fee: {houseFee}% </p>\n      <p>Admin: {admin} </p>\n      <p>Contract address: {contractAddress} </p>\n      {(contractBalance != undefined) ? (\n        <p>Contract balance: {web3.utils.fromWei(contractBalance, 'ether')} ETH</p>\n      ) : null }\n      <p>Contract state: {states[bet.state]}</p>\n\n\n      {(bet.state == 1 && betSize != undefined) ? (\n        <>\n          <hr></hr>\n          <h2>Current Bet</h2>\n          <p>Bet size: {web3.utils.fromWei(betSize, 'ether')} ETH / Winning Pot: {(web3.utils.fromWei(betSize, 'ether')*betCount) * (100 - houseFee) / 100} ETH</p>\n          <p>Bet minimum players: {betCount}</p>\n          <div>\n          <hr></hr>\n            <h2>Players</h2>\n            <ul>\n              {players.map(player => <li key={player}>{player}</li>)}\n            </ul>\n          </div>\n        </>\n        ) : null }\n\n        {(bet.state == 0 && accounts[0] == admin) ? (\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <h2>Create bet</h2>\n            <form onSubmit={e => createBet(e)}>\n              <div className=\"form-group\">\n                <label htmlFor=\"count\">Minimum Players</label>\n                <input type=\"text\" className=\"form-control\" id=\"count\" />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"size\">Bet size (ETH)</label>\n                <input type=\"text\" className=\"form-control\" id=\"size\" />\n              </div>\n              <button type=\"submit\" className=\"btn btn-primary\">Submit Bet</button>\n            </form>\n          </div>\n        </div>\n        ) : null}\n\n      {(bet.state == 1 && accounts[0] == admin) ? (\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <hr></hr>\n              <button\n                onClick={e => cancel()}\n                type=\"submit\"\n                className=\"btn btn-primary\"\n              >\n                Cancel Bet\n              </button>\n          </div>\n        </div>\n      ) : null }\n\n      {(accounts[0] == admin && contractBalance > 0.01) ? (\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <hr></hr>\n              <button\n                onClick={e => withdrawEther()}\n                type=\"submit\"\n                className=\"btn btn-primary\"\n              >\n                Withdraw Ether\n              </button>\n          </div>\n        </div>\n      ) : null }\n\n      {(bet.state == 1 && betSize != undefined) ? (\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <hr></hr>\n            <h2>Bet - do it</h2>\n              <button\n                onClick={e => doBet(e)}\n                type=\"submit\"\n                className=\"btn btn-primary\"\n              >\n                Send {web3.utils.fromWei(betSize, 'ether')} ETH into the Pot\n              </button>\n              <p>after signing transaction, do not bet again, wait for confirmation</p>\n          </div>\n        </div>\n      ) : null }\n\n      <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <hr></hr>\n            <h5>Past Winners:</h5>\n            <ul>\n              {(events != undefined) ? events.map(event => <li key={event.id}>{event.address} for a total of {web3.utils.fromWei(event.pot, 'ether')} ETH</li>) : null}\n            </ul>\n          </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}